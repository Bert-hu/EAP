<!DOCTYPE html>
<html lang="ch">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style>
    /* 基础样式设置 */
html, body {
    background: #000d4a url('../images/dashboard/bg.jpg') center top;
    background-size: cover;
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    font-family: 'Cambria';
    font-weight: bold;
    color: rgba(255, 255, 255, .7);
    cursor: default;
    overflow: hidden;
}

/* 头部样式 */
.header {
    top: 0;
    padding: 0;
    margin: 0;
    width: 100%;
    height: 7%;
    background: url(../images/dashboard/head_bg.png) no-repeat center center;
    background-size: cover;
    position: relative;
}

.header .logo {
    background-image: url('../images/Logo/Logo_W_SMDi4_400x65_简.png');
    background-repeat: no-repeat;
    background-size: contain;
    width: 20%;
    height: 100%;
    float: left;
    margin-top: 1vh;
    margin-left: 1vw;
}

.header .title {
    position: absolute;
    width: 100%;
    color: #fff;
    text-align: center;
    line-height: 8vh;
    font-size: 3vw;
}

.header .controlbox {
    position: absolute;
    font-size: 1.5vw;
    right: 1vw;
    top: 1vh;
    cursor: pointer;
    color: rgba(64, 95, 168, 0.6);
}

/* 容器布局 */
.container {
    width: 100%;
    height: calc(100% - 7%);
    padding: 1%;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    gap: 1%;
}

.section {
    background-color: rgba(10, 30, 68, 0.6);
    border: 1px solid rgba(32, 110, 255, 0.3);
    border-radius: 4px;
    padding: 1%;
    box-sizing: border-box;
    overflow: hidden;
}

.section-title {
    color: #4cc9f0;
    font-size: 1.2vw;
    margin-bottom: 1%;
    padding-left: 0.5%;
    border-left: 3px solid #4cc9f0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.section-title .subtitle {
    font-size: 0.9vw;
    color: rgba(255, 255, 255, 0.6);
}

/* 错误提示样式 */
.error-message {
    color: #ff4500;
    text-align: center;
    padding: 20px;
    font-size: 1vw;
}

/* AGV状态样式 */
.agv-section {
    height: 25%;
    min-height: 180px; /* 确保在小屏幕上有足够高度 */
}

.agv-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); /* 自动适应列数 */
    grid-template-rows: repeat(2, 1fr); /* 固定2行 */
    gap: 1%;
    height: calc(100% - 30px);
    padding: 0.5%;
    overflow-x: auto; /* 水平滚动 */
    overflow-y: hidden; /* 禁止垂直滚动 */
}

/* 隐藏水平滚动条但保留滚动功能 */
.agv-container::-webkit-scrollbar {
    height: 6px;
}

.agv-container::-webkit-scrollbar-track {
    background: rgba(10, 30, 68, 0.6);
    border-radius: 3px;
}

.agv-container::-webkit-scrollbar-thumb {
    background: rgba(32, 110, 255, 0.5);
    border-radius: 3px;
}

.agv-card {
    background-color: rgba(10, 25, 60, 0.8);
    border: 1px solid rgba(32, 110, 255, 0.5);
    border-radius: 6px;
    padding: 5%;
    display: flex; /* 水平布局 */
    transition: all 0.3s ease;
    box-sizing: border-box;
    height: 100%;
    min-width: 150px; /* 确保卡片有最小宽度 */
}

.agv-card:hover {
    border-color: #4cc9f0;
    box-shadow: 0 0 8px rgba(76, 201, 240, 0.5);
}

/* 电池区域 - 占卡片宽度的1/3 */
.agv-battery {
    width: 33.333%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding-right: 5%;
    box-sizing: border-box;
}

.battery-icon {
    width: 80%; /* 优化电池宽度 */
    height: 60%; /* 电池高度占电量区域的60% */
    border: 2px solid #4cc9f0;
    border-radius: 4px;
    position: relative;
    min-height: 30px;
    margin-bottom: 5%;
}

.battery-level {
    position: absolute;
    bottom: 2px;
    left: 2px;
    right: 2px;
    border-radius: 2px;
    transition: height 0.5s ease;
}

.battery-high {
    background-color: #00ff7f;
}

.battery-medium {
    background-color: #ffd700;
}

.battery-low {
    background-color: #ff4500;
}

.battery-charging {
    background: linear-gradient(135deg, #4cc9f0 25%, transparent 25%) -10px 0,
                linear-gradient(225deg, #4cc9f0 25%, transparent 25%) -10px 0,
                linear-gradient(315deg, #4cc9f0 25%, transparent 25%),
                linear-gradient(45deg, #4cc9f0 25%, transparent 25%);
    background-size: 20px 20px;
    animation: charge 2s linear infinite;
}

@@keyframes charge {
    0% {
        background-position: 0 0, 0 0, 10px -10px, -10px 10px;
    }
    100% {
        background-position: 10px -10px, -10px 10px, 20px 0, 0 20px;
    }
}

.battery-cap {
    position: absolute;
    top: -6px;
    right: 40%;
    width: 20%;
    height: 15%;
    background-color: #4cc9f0;
    border-radius: 2px 2px 0 0;
}

.battery-percentage {
    font-family: electronicFont;
    font-size: clamp(0.9vw, 14px, 1.1vw);
    color: #4cc9f0;
    white-space: nowrap;
}

/* 名称和状态区域 - 占卡片宽度的2/3 */
.agv-info {
    width: 66.666%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding-left: 5%;
    box-sizing: border-box;
}

.agv-name {
    font-size: clamp(0.8vw, 14px, 1vw);
    color: #fff;
    width: 100%;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    margin-bottom: 8px;
    padding: 2px 0;
}

.agv-status {
    font-size: clamp(0.7vw, 12px, 0.8vw);
    padding: 3px 8px;
    border-radius: 10px;
    display: inline-block;
}

.status-running {
    background-color: rgba(0, 255, 127, 0.3);
    color: #00ff7f;
}

.status-idle {
    background-color: rgba(255, 215, 0, 0.3);
    color: #ffd700;
}

.status-error {
    background-color: rgba(255, 69, 0, 0.3);
    color: #ff4500;
}

.status-charging {
    background-color: rgba(76, 201, 240, 0.3);
    color: #4cc9f0;
}

.status-unknown {
    background-color: rgba(128, 128, 128, 0.3);
    color: #cccccc;
}

/* 统计和Handler组合区域 */
.stats-handler-container {
    display: flex;
    gap: 1%;
    height: 75%;
    min-height: 0;
}

/* 设备统计和库存区域 */
.stats-section {
    width: 30%;
    height: 100%;
    display: flex;
    flex-direction: column;
    gap: 1%;
    min-height: 0;
}

.inventory-section {
    flex: 1;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    min-height: 0;
}

/* 表格容器 */
.inventory-table-container {
    flex: 1;
    overflow: auto;
    position: relative;
}

/* 优化滚动条样式 */
.inventory-table-container::-webkit-scrollbar {
    width: 8px;
    height: 8px;
}

.inventory-table-container::-webkit-scrollbar-track {
    background: rgba(10, 30, 68, 0.3);
    border-radius: 4px;
}

.inventory-table-container::-webkit-scrollbar-thumb {
    background: rgba(32, 110, 255, 0.5);
    border-radius: 4px;
}

.inventory-table-container::-webkit-scrollbar-thumb:hover {
    background: rgba(76, 201, 240, 0.7);
}

.inventory-table {
    width: 100%;
    border-collapse: collapse;
}

.inventory-table th,
.inventory-table td {
    border: 1px solid rgba(32, 110, 255, 0.3);
    padding: 8px 5px;
    text-align: center;
    font-size: clamp(0.7vw, 12px, 0.8vw);
    white-space: nowrap;
    color: #fff; /* 表格内容文字设为白色 */
}

.inventory-table th {
    background-color: rgba(32, 110, 255, 0.2);
    color: #4cc9f0; /* 表头颜色 */
    height: 36px; /* 固定表头高度 */
    position: sticky;
    top: 0;
    z-index: 10;
}

.inventory-table tr:nth-child(even) {
    background-color: rgba(10, 25, 60, 0.3);
}

.inventory-table tr:hover {
    background-color: rgba(76, 201, 240, 0.1);
}

/* 任务统计图表区域 */
.task-chart-section {
    flex: 1;
    min-height: 0;
}

.chart-container {
    width: 100%;
    height: calc(100% - 30px);
}

/* Handler设备样式 */
.handler-section {
    width: 70%;
    height: 100%;
    position: relative;
    display: flex;
    flex-direction: column;
    min-height: 0;
}

.handler-carousel {
    flex: 1;
    overflow: hidden;
    position: relative;
    min-height: 0;
}

.handler-group {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    grid-template-rows: repeat(3, 1fr);
    gap: clamp(8px, 1vw, 12px);
    height: 100%;
    transition: transform 0.5s ease;
    padding: 5px;
    box-sizing: border-box;
}

.handler-card {
    background-color: rgba(10, 25, 60, 0.8);
    border: 1px solid rgba(32, 110, 255, 0.5);
    border-radius: 4px;
    padding: clamp(6px, 0.8vw, 10px);
    display: flex;
    flex-direction: column;
    transition: all 0.3s ease;
    min-height: 0;
}

.handler-card:hover {
    border-color: #4cc9f0;
    box-shadow: 0 0 5px rgba(76, 201, 240, 0.5);
}

/* AGV启用时的头部样式 */
.handler-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 5px;
    flex-shrink: 0;
    padding: 4px 6px;
    border-radius: 3px;
    transition: background-color 0.3s ease;
}

.agv-active-header {
    background-color: rgba(0, 255, 127, 0.2);
    border: 1px solid rgba(0, 255, 127, 0.4);
}

.handler-name {
    color: #fff;
    font-size: clamp(0.8vw, 14px, 1vw);
    font-weight: 500;
}

.handler-agv-status {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    align-self: center;
    box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);
    transition: all 0.3s ease;
}

.agv-enabled {
    background-color: #00ff7f;
    box-shadow: 0 0 6px rgba(0, 255, 127, 0.6);
}

.agv-disabled {
    background-color: #444;
}

.handler-info {
    font-size: clamp(0.7vw, 12px, 0.8vw);
    color: rgba(255, 255, 255, 0.6);
    margin-bottom: 6px;
    display: flex;
    justify-content: space-between;
    flex-shrink: 0;
}

.handler-status {
    font-size: clamp(0.7vw, 12px, 0.8vw);
    padding: 2px 6px;
    border-radius: 8px;
    display: inline-block;
    margin-bottom: 6px;
    width: fit-content;
    flex-shrink: 0;
}

/* 任务状态样式 - 有任务时更明显 */
.handler-task {
    font-size: clamp(0.65vw, 11px, 0.75vw);
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: 4px;
    flex-shrink: 0;
    word-break: break-word;
    transition: all 0.3s ease;
}

.active-task {
    color: #4cc9f0;
    font-weight: 500;
    text-shadow: 0 0 3px rgba(76, 201, 240, 0.3);
}

/* 有任务的卡片添加边框高亮 */
.handler-card.has-task {
    border-color: rgba(76, 201, 240, 0.7);
}

.handler-task-time {
    font-size: clamp(0.6vw, 10px, 0.7vw);
    color: rgba(150, 200, 255, 0.7);
    margin-top: auto;
    flex-shrink: 0;
}

/* 轮播控制 */
.carousel-controls {
    position: absolute;
    bottom: 10px;
    right: 10px;
    display: flex;
    gap: 10px;
    z-index: 10;
}

.carousel-btn {
    width: 30px;
    height: 30px;
    background-color: rgba(10, 30, 68, 0.8);
    border: 1px solid rgba(32, 110, 255, 0.5);
    color: #4cc9f0;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
}

.carousel-btn:hover {
    background-color: rgba(76, 201, 240, 0.2);
    border-color: #4cc9f0;
}

.group-indicators {
    position: absolute;
    bottom: 10px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 8px;
    z-index: 10;
}

.group-indicator {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: rgba(32, 110, 255, 0.3);
    transition: all 0.3s ease;
}

.group-indicator.active {
    background-color: #4cc9f0;
    width: 20px;
    border-radius: 5px;
}

/* 响应式适配 */
@@media (min-width: 1920px) {
    .handler-card {
        padding: 10px;
    }

    .agv-card {
        padding: 3% 2%;
    }

    .battery-icon {
        min-height: 40px;
    }
}

/* 超宽屏特殊处理 */
@@media (min-width: 2560px) {
    .handler-group {
        gap: 15px;
    }

    .agv-container {
        gap: 1%;
    }

    .section {
        padding: 15px;
    }
}

/* 小屏幕适配 */
@@media (max-width: 1366px) {
    .agv-name {
        font-size: 10px;
    }

    .battery-percentage {
        font-size: 12px;
    }

    .agv-status {
        font-size: 9px;
        padding: 1px 4px;
    }
}

    </style>

    @*<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">*@
    <link href="~/layui/css/layui.css" rel="stylesheet" />
    <title>Handler & AGV Dashboard</title>
</head>

<body>
    <script>
        function showFullScreen() {
            /*判断是否全屏*/
            let isFullscreen = document.fullScreenElement//W3C
                || document.msFullscreenElement //IE11
                || document.mozFullScreenElement //火狐
                || document.webkitFullscreenElement //谷歌
                || false;

            if (!isFullscreen) {
                let el = document.documentElement;
                if (el.requestFullscreen) {
                    el.requestFullscreen();
                } else if (el.mozRequestFullScreen) {
                    el.mozRequestFullScreen();
                } else if (el.webkitRequestFullscreen) {
                    el.webkitRequestfullscreen();
                } else if (el.msRequestFullscreen) {
                    el.msRequestFullscreen();
                }

                document.getElementById("fullScreen").classList.remove("layui-icon-screen-full");
                document.getElementById("fullScreen").classList.add("layui-icon-screen-restore");
            }
            else {
                if (document.exitFullscreen) {
                    document.exitFullscreen();
                } else if (document.msExitFullscreen) {
                    document.msExitFullscreen();
                } else if (document.mozCancelFullScreen) {
                    document.mozCancelFullScreen();
                } else if (document.webkitCancelFullScreen) {
                    document.webkitCancelFullScreen();
                }
                document.getElementById("fullScreen").classList.remove("layui-icon-screen-restore");
                document.getElementById("fullScreen").classList.add("layui-icon-screen-full");
            }
        };
    </script>
    <div class="header">
        <div class="logo"> </div>
        <div class="title"><span>Handler & AGV Dashboard</span></div>
        <i id="fullScreen" class="layui-icon layui-icon-screen-full controlbox" onclick="showFullScreen()"></i>
    </div>

    <div class="container">
        <!-- AGV状态显示区域 -->
        <div class="section agv-section">
            <div class="section-title">
                <span>AGV状态监控</span>
                <span class="subtitle">实时更新设备运行状态与电量信息</span>
            </div>
            <div class="agv-container" id="agvContainer">
                <!-- AGV卡片将通过JavaScript动态生成 -->
            </div>
        </div>

        <!-- 统计和Handler组合区域 -->
        <div class="stats-handler-container">
            <!-- 设备统计和库存区域 -->
            <div class="stats-section">
                <div class="section inventory-section">
                    <div class="section-title">
                        <span>设备开机数量与库存统计</span>
                        <span class="subtitle">按机种与站别分类</span>
                    </div>
                    <div class="inventory-table-container">
                        <table class="inventory-table">
                            <thead>
                                <tr>
                                    <th>机种</th>
                                    <th>站别</th>
                                    <th>开启设备数</th>
                                    <th>AGV库存</th>
                                    <th>一期Stocker</th>
                                    <th>二期Stocker</th>
                                </tr>
                            </thead>
                            <tbody id="inventoryTableContent">
                                <!-- 库存数据将通过JavaScript动态生成 -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- 任务统计图表区域 -->
                <div class="section task-chart-section">
                    <div class="section-title">
                        <span>AGV上下料任务统计</span>
                        <span class="subtitle">最近15天数据趋势</span>
                    </div>
                    <div class="chart-container">
                        <canvas id="taskStatsChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Handler设备状态显示区域 -->
            <div class="section handler-section">
                <div class="section-title">
                    <span>Handler设备状态</span>
                    <span class="subtitle">共<span id="totalHandlers">0</span>台设备，当前显示第<span id="currentPageText">1</span>/<span id="totalPages">0</span>页</span>
                </div>
                <div class="handler-carousel" id="handlerCarousel">
                    <div class="handler-group" id="handlerGroup">
                        <!-- Handler卡片将通过JavaScript动态生成 -->
                    </div>
                </div>
                <div class="group-indicators" id="groupIndicators">
                    <!-- 分组指示器将通过JavaScript动态生成 -->
                </div>
                <div class="carousel-controls">
                    <div class="carousel-btn" id="prevGroup">
                        <i class="layui-icon layui-icon-left"></i>
                    </div>
                    <div class="carousel-btn" id="nextGroup">
                        <i class="layui-icon layui-icon-right"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="~/echarts/echarts.js"></script>
    <script src="~/layui/layui.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        layui.use(['form', 'slider', 'laydate', 'element'], function () {
            var form = layui.form
                , laydate = layui.laydate
                , slider = layui.slider
                , element = layui.element;
        });

        // 定义机种和站别数据
        const models = ['A系列', 'B系列', 'C系列', 'D系列', 'E系列', 'F系列', 'G系列'];
        const stations = ['站别1', '站别2', '站别3', '站别4', '站别5', '站别6'];

        // Handler数据变量
        let handlerData = [];

        // 从API获取Handler数据
        async function getHandlerData() {
            try {
                const response = await fetch('./GetHandlerStatus', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                return await response.json();
            } catch (error) {
                console.error('获取Handler数据失败:', error);
                return null;
            }
        }

        // 通过HTTP GET请求获取AGV数据
        async function getAgvData() {
            try {
                const response = await fetch('./GetAgvData', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                return await response.json();
            } catch (error) {
                console.error('获取AGV数据失败:', error);
                // 显示错误信息
                const container = document.getElementById('agvContainer');
                container.innerHTML = `<div class="error-message">获取AGV数据失败: ${error.message}</div>`;
                return null;
            }
        }

        // 通过HTTP GET请求获取库存数据
        async function getInventoryData() {
            try {
                const response = await fetch('./GetInventoryStatus', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                return await response.json();
            } catch (error) {
                console.error('获取库存数据失败:', error);
                // 返回空数组而不是null，避免页面崩溃
                return [];
            }
        }

        // 渲染AGV状态卡片
        async function renderAGVCards() {
            const container = document.getElementById('agvContainer');
            // 从API获取数据
            const agvData = await getAgvData();

            if (!agvData || !Array.isArray(agvData)) {
                container.innerHTML = '<div class="error-message">未获取到有效的AGV数据</div>';
                return;
            }

            // 清空容器
            container.innerHTML = '';

            // 如果没有数据
            if (agvData.length === 0) {
                container.innerHTML = '<div class="error-message">没有AGV数据可供显示</div>';
                return;
            }

            agvData.forEach(agv => {
                // 组合ID和昵称作为显示名称，如"10:机械臂AGV028"
                const displayName = `${agv.id}:${agv.nickname}`;

                // 确定电池级别和样式
                let batteryClass = 'battery-high';
                if (agv.battery < 50) batteryClass = 'battery-medium';
                if (agv.battery < 20) batteryClass = 'battery-low';

                // 充电状态特殊样式
                if (agv.sys_state === 'CHARGING') {
                    batteryClass = 'battery-charging';
                }

                // 确定状态文本和样式
                let statusText = '';
                let statusClass = '';
                switch (agv.sys_state) {
                    case 'EXECUTING':
                        statusText = '运行中';
                        statusClass = 'status-running';
                        break;
                    case 'IDLE':
                        statusText = '空闲';
                        statusClass = 'status-idle';
                        break;
                    case 'ERROR':
                        statusText = '故障';
                        statusClass = 'status-error';
                        break;
                    case 'CHARGING':
                        statusText = '充电中';
                        statusClass = 'status-charging';
                        break;
                    case 'UNKNOWN':
                        statusText = '未知状态';
                        statusClass = 'status-unknown';
                        break;
                    default:
                        statusText = agv.sys_state;
                        statusClass = 'status-unknown';
                }

                const card = document.createElement('div');
                card.className = 'agv-card';
                card.innerHTML = `
                                <div class="agv-battery">
                                    <div class="battery-icon">
                                        <div class="battery-level ${batteryClass}" style="height: ${agv.battery}%"></div>
                                        <div class="battery-cap"></div>
                                    </div>
                                    <div class="battery-percentage">${agv.battery}%</div>
                                </div>
                                <div class="agv-info">
                                    <div class="agv-name" title="${displayName}">${displayName}</div>
                                    <div class="agv-status ${statusClass}">${statusText}</div>
                                </div>
                            `;

                container.appendChild(card);
            });
        }

        // 渲染Handler设备卡片
        let currentGroup = 0;
        const devicesPerGroup = 15; // 每组显示15台设备（5列×3行）
        let totalGroups = 0;

        // 转换processState为中文
        function getProcessStateText(state) {
            const stateMap = {
                'IDLE': '空闲',
                'SETUP': '设置中',
                'READY': '准备就绪',
                'EXECUTING': '运行中',
                'PAUSE': '暂停',
                'ALARM_PAUSE': '报警暂停',
                'IDLE_WITH_ALARMS': '带报警空闲',
                'Unknown': '未知状态'
            };
            return stateMap[state] || state;
        }

        // 转换processState为对应的样式类
        function getProcessStateClass(state) {
            const classMap = {
                'IDLE': 'status-idle',
                'SETUP': 'status-idle',
                'READY': 'status-running',
                'EXECUTING': 'status-running',
                'PAUSE': 'status-idle',
                'ALARM_PAUSE': 'status-error',
                'IDLE_WITH_ALARMS': 'status-error',
                'Unknown': 'status-unknown'
            };
            return classMap[state] || 'status-unknown';
        }

        // 转换currentTaskState为中文
        function getTaskStateText(state) {
            const stateMap = {
                'AGV任务已请求': 'AGV任务已请求',
                'AGV已到达': 'AGV已到达',
                '设备已锁定进出料': '设备已锁定进出料',
                'AGV手臂任务已完成': 'AGV手臂任务已完成',
                '未知状态': '未知状态'
            };
            return stateMap[state] || state;
        }

        function renderHandlerGroup(groupIndex) {
            const container = document.getElementById('handlerGroup');
            container.innerHTML = '';

            // 如果没有数据
            if (handlerData.length === 0) {
                container.innerHTML = '<div class="error-message" style="grid-column: 1 / -1; display: flex; align-items: center; justify-content: center;">没有Handler数据可供显示</div>';
                return;
            }

            // 更新当前页码显示
            document.getElementById('currentPageText').textContent = groupIndex + 1;

            // 计算当前组的设备范围
            const startIndex = groupIndex * devicesPerGroup;
            const endIndex = Math.min(startIndex + devicesPerGroup, handlerData.length);
            const currentDevices = handlerData.slice(startIndex, endIndex);

            currentDevices.forEach(handler => {
                // 获取状态文本和样式
                const processStateText = getProcessStateText(handler.processState);
                const processStateClass = getProcessStateClass(handler.processState);
                const taskStateText = getTaskStateText(handler.currentTaskState);
                const hasTask = !!handler.currentTaskState && handler.currentTaskState !== 'none'; // 判断是否有任务

                // 计算任务请求到现在的时间差
                let taskTime = '无';
                if (handler.currentTaskRequestTime) {
                    const requestDate = new Date(handler.currentTaskRequestTime);
                    const now = new Date();
                    const diffMs = now - requestDate;

                    // 转换为不同时间单位
                    const diffSeconds = Math.floor(diffMs / 1000);
                    const diffMinutes = Math.floor(diffSeconds / 60);
                    const diffHours = Math.floor(diffMinutes / 60);
                    const diffDays = Math.floor(diffHours / 24);

                    // 根据时间差选择合适的显示单位
                    if (diffDays > 0) {
                        taskTime = `${diffDays}天前`;
                    } else if (diffHours > 0) {
                        taskTime = `${diffHours}小时前`;
                    } else if (diffMinutes > 0) {
                        taskTime = `${diffMinutes}分钟前`;
                    } else {
                        taskTime = `${diffSeconds}秒前`;
                    }
                }

                const card = document.createElement('div');
                card.className = `handler-card ${hasTask ? 'has-task' : ''}`;
                card.innerHTML = `
                    <div class="handler-header ${handler.agvEnabled ? 'agv-active-header' : ''}">
                        <div class="handler-name">Handler-${handler.id}</div>
                        <div class="handler-agv-status ${handler.agvEnabled ? 'agv-enabled' : 'agv-disabled'}"
                             title="${handler.agvEnabled ? 'AGV功能已开启' : 'AGV功能已关闭'}"></div>
                    </div>
                    <div class="handler-info">
                        <div>${handler.materialName || 'N/A'}</div>
                        <div>${handler.groupName || 'N/A'}</div>
                    </div>
                    <div class="handler-status ${processStateClass}">${processStateText}</div>
                    <div class="handler-task ${hasTask ? 'active-task' : ''}">任务状态: ${taskStateText}</div>
                    <div class="handler-task-time">任务请求时间: ${taskTime}</div>
                `;

                container.appendChild(card);
            });


            // 更新指示器状态
            updateGroupIndicators(groupIndex);
        }

        // 更新分组指示器
        function updateGroupIndicators(activeIndex = 0) {
            const container = document.getElementById('groupIndicators');
            container.innerHTML = '';

            for (let i = 0; i < totalGroups; i++) {
                const indicator = document.createElement('div');
                indicator.className = `group-indicator ${i === activeIndex ? 'active' : ''}`;
                indicator.addEventListener('click', () => {
                    currentGroup = i;
                    renderHandlerGroup(currentGroup);
                });
                container.appendChild(indicator);
            }
        }

        // 渲染库存统计表格
        async function renderInventoryStats() {
            // 从API获取库存数据
            const inventoryStats = await getInventoryData();
            const tableBody = document.getElementById('inventoryTableContent');
            tableBody.innerHTML = '';

            // 如果没有数据或数据为空
            if (!inventoryStats || inventoryStats.length === 0) {
                tableBody.innerHTML = `
                                <tr>
                                    <td colspan="6" style="text-align: center; color: #ff4500;">
                                        未获取到库存数据或数据为空
                                    </td>
                                </tr>
                            `;
                return;
            }

            // 使用API返回的数据填充表格
            inventoryStats.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                                <td>${item.materialName || 'N/A'}</td>
                                <td>${item.groupName || 'N/A'}</td>
                                <td>${item.enableMachineCount}</td>
                                <td>${item.agvQuantity}</td>
                                <td>${item.stocker1Quantity}</td>
                                <td>${item.stocker2Quantity}</td>
                            `;
                tableBody.appendChild(row);
            });
        }



        // 渲染任务统计图表
        async function renderTaskStatsChart() {
            try {
                // 从API获取数据
                const response = await fetch('./GetTaskStats');
                const stats = await response.json();
                console.log(stats);
                // 确保数据按日期排序（假设API返回的是无序的）
                stats.sort((a, b) => new Date(a.date) - new Date(b.date));

                const ctx = document.getElementById('taskstatschart');

                // 准备图表数据
                const dates = stats.map(item => {
                    const date = new Date(item.date);
                    return `${date.getMonth() + 1}/${date.getDate()}`; // 格式化日期为月/日
                });
                const countData = stats.map(item => item.count);
                const successRateData = stats.map(item => item.successRate);
                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: dates,
                        datasets: [
                            {
                                label: '任务数量',
                                data: countData,
                                backgroundColor: 'rgba(76, 201, 240, 0.7)',
                                borderColor: 'rgba(76, 201, 240, 1)',
                                borderWidth: 1,
                                yAxisID: 'y' // 使用左侧Y轴
                            },
                            {
                                label: '成功率 (%)',
                                data: successRateData,
                                type: 'line', // 指定为折线图
                                fill: false,
                                borderColor: 'rgba(255, 215, 0, 1)',
                                backgroundColor: 'rgba(255, 215, 0, 0.1)',
                                tension: 0.1,
                                yAxisID: 'y1' // 使用右侧Y轴
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: {
                                grid: {
                                    color: 'rgba(255, 255, 255, 0.1)'
                                },
                                ticks: {
                                    color: 'rgba(255, 255, 255, 0.7)'
                                }
                            },
                            y: {
                                type: 'linear',
                                display: true,
                                position: 'left',
                                title: {
                                    display: true,
                                    text: '任务数量',
                                    color: 'rgba(255, 255, 255, 0.9)'
                                },
                                beginAtZero: true,
                                grid: {
                                    color: 'rgba(255, 255, 255, 0.1)'
                                },
                                ticks: {
                                    color: 'rgba(255, 255, 255, 0.7)'
                                }
                            },
                            y1: {
                                type: 'linear',
                                display: true,
                                position: 'right',
                                title: {
                                    display: true,
                                    text: '成功率 (%)',
                                    color: 'rgba(255, 215, 0, 0.9)'
                                },
                                beginAtZero: true,
                                max: 100, // 成功率最大值为100%
                                grid: {
                                    drawOnChartArea: false // 不在图表区域绘制网格线
                                },
                                ticks: {
                                    color: 'rgba(255, 215, 0, 0.7)'
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                labels: {
                                    color: 'rgba(255, 255, 255, 0.9)'
                                }
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('获取任务统计数据失败:', error);
            }
        }



        // 更新Handler数据
        async function updateHandlerData() {
            const newData = await getHandlerData();
            if (newData && Array.isArray(newData)) {
                handlerData = newData;
                totalGroups = Math.ceil(handlerData.length / devicesPerGroup);

                // 更新总设备数和总页数显示
                document.getElementById('totalHandlers').textContent = handlerData.length;
                document.getElementById('totalPages').textContent = totalGroups;

                // 确保当前组索引有效
                if (currentGroup >= totalGroups) {
                    currentGroup = Math.max(0, totalGroups - 1);
                }

                renderHandlerGroup(currentGroup);
                updateGroupIndicators();
            }
        }

        // 初始化页面
        async function init() {
            // 先加载AGV数据
            await renderAGVCards();

            // 加载Handler数据
            await updateHandlerData();

            // 初始化其他组件
            await renderInventoryStats(); // 使用await确保库存数据加载完成
            renderTaskStatsChart();

            // 绑定轮播控制事件
            document.getElementById('prevGroup').addEventListener('click', () => {
                if (totalGroups === 0) return;
                currentGroup = (currentGroup - 1 + totalGroups) % totalGroups;
                renderHandlerGroup(currentGroup);
            });

            document.getElementById('nextGroup').addEventListener('click', () => {
                if (totalGroups === 0) return;
                currentGroup = (currentGroup + 1) % totalGroups;
                renderHandlerGroup(currentGroup);
            });

            // 定时更新数据
            setInterval(async () => {
                // 更新AGV数据
                await renderAGVCards();

                // 更新库存数据
                await renderInventoryStats();

                // 更新Handler数据
                await updateHandlerData();
            }, 5000); // 每5秒更新一次
        }

        // 页面加载完成后初始化
        window.addEventListener('load', init);

        // 窗口大小变化时重新布局
        window.addEventListener('resize', () => {
            // 重新渲染当前页的Handler卡片以适应新尺寸
            renderHandlerGroup(currentGroup);
        });
    </script>
</body>
</html>
